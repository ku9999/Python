class TreeNode:
    def __init__(self, x):
        # Конструктор класса TreeNode, создает узел с заданным значением x.
        self.val = x
        self.left = None
        self.right = None

def pathSum(root, sum):
    # Функция pathSum принимает корень бинарного дерева (root) и заданную сумму (sum).
    def dfs(node, prev_sum):
        # Внутренняя рекурсивная функция dfs для обхода дерева.
        if not node:
            # Если узел не существует (пустой), возвращаем 0.
            return 0
        curr_sum = prev_sum + node.val
        # Вычисляем текущую сумму пути, добавляя значение текущего узла к предыдущей сумме.
        return int(curr_sum == sum) + dfs(node.left, curr_sum) + dfs(node.right, curr_sum)
        # Возвращаем 1, если текущая сумма равна заданной сумме, иначе 0.
        # Затем выполняем рекурсивный вызов для левого и правого поддерева.

    # sum of path from each node
    # Возвращает результат выполнения функции dfs для корневого узла, начиная с суммы 0.
    return dfs(root, 0) if root else 0
    # Если дерево пустое (корень не существует), возвращаем 0.

root = TreeNode(7)
# Создание корневого узла со значением 5.
root.left = TreeNode(4)
# Создание левого потомка корневого узла со значением 4.
root.right = TreeNode(8)
# Создание правого потомка корневого узла со значением 8.
root.left.left = TreeNode(2)
# Создание левого потомка левого потомка корневого узла со значением -11.
root.left.left.left = TreeNode(5)
# Создание левого потомка левого потомка левого потомка корневого узла со значением 7.
root.left.left.right = TreeNode(2)
# Создание правого потомка левого потомка левого потомка корневого узла со значением 2.
root.right.left = TreeNode(3)
# Создание левого потомка правого потомка корневого узла со значением 13.
root.right.right = TreeNode(7)
# Создание правого потомка правого потомка корневого узла со значением 4.
root.right.right.left = TreeNode(5)
# Создание левого потомка правого потомка правого потомка корневого узла со значением 5.
root.right.right.right = TreeNode(3)
# Создание правого потомка правого потомка правого потомка корневого узла со значением 1.

print(pathSum(root, 22))
# Вывод результата вызова функции pathSum для данного дерева и суммы 22.
