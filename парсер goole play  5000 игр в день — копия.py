import time
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import csv
import os
from datetime import datetime
from google_play_scraper import app, search

# === –ù–ê–°–¢–†–û–ô–ö–ò ===

GOOGLE_SHEETS_KEY = "1ERmKj9Y6ZG7VCnpRN1e4Sl66ruz4kf69hLTA53YcHcY"
CREDENTIALS_FILE = "credentials.json"

BULKEMAILCHECKER_API_KEY = "qtwW05DdxKNSkrJhyjPQTY7faAIsVEBu"
MAX_APPS = 133  # –°–∫–æ–ª—å–∫–æ **–≤–∞–ª–∏–¥–Ω—ã—Ö** –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞ –∑–∞–ø—É—Å–∫

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS ===

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEETS_KEY).sheet1

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫; –∏–Ω–∞—á–µ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ)
headers = [
    "ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    "–ù–∞–∑–≤–∞–Ω–∏–µ",
    "–°–∫–∞—á–∏–≤–∞–Ω–∏—è",
    "Email —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
    "–°—Ç—Ä–∞–Ω–∞",
    "–†–µ–π—Ç–∏–Ω–≥",
    "–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞",
    "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
    "–ù–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ"
]
try:
    sheet.update(range_name="A1:J1", values=[headers])
except Exception as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ Google Sheets: {e}")

# –°—á–∏—Ç—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ email, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
try:
    existing_emails = set(email for email in sheet.col_values(4)[1:] if email)
except Exception:
    existing_emails = set()

# === –§–£–ù–ö–¶–ò–ò ===

def validate_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ email —á–µ—Ä–µ–∑ BulkEmailChecker API.
    - –ï—Å–ª–∏ status_code=200, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ status=="passed".
    - –ï—Å–ª–∏ status_code=403, –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True (—Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º).
    - –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    if not email:
        return False
    url = f"https://api.bulkemailchecker.com/?key={BULKEMAILCHECKER_API_KEY}&email={email}"
    try:
        response = requests.get(url, timeout=10)
    except requests.RequestException as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ BulkEmailChecker: {e}")
        return False

    if response.status_code == 200:
        try:
            data = response.json()
        except ValueError:
            print("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç BulkEmailChecker")
            return False
        return data.get("status") == "passed"
    elif response.status_code == 403:
        print(f"‚ùó BulkEmailChecker –≤–µ—Ä–Ω—É–ª 403. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è {email} (—Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º).")
        return True
    else:
        print(f"‚ùó BulkEmailChecker –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code} –¥–ª—è {email}")
        return False

def save_to_csv(row_data: list, filename_prefix="backup_export"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç row_data –≤ CSV <filename_prefix>_<YYYY-MM-DD>.csv.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–æ–≤—ã–π, —Å–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    """
    date_str = datetime.now().strftime("%Y-%m-%d")
    filename = f"{filename_prefix}_{date_str}.csv"
    file_exists = os.path.isfile(filename)
    try:
        with open(filename, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            if not file_exists:
                writer.writerow(headers)
            writer.writerow(row_data)
    except Exception as e:
        print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV ({filename}): {e}")

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ü–ò–°–ö–ê app_id –° –ü–û–ú–û–©–¨–Æ –ü–û–ò–°–ö–ê –ü–û –ö–õ–Æ–ß–ï–í–û–ú–£ –°–õ–û–í–£ ===

# –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ ‚Äúa‚Äù‚Ä¶‚Äúz‚Äù –∏ ‚Äú0‚Äù‚Ä¶‚Äú9‚Äù –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ —Å–æ–±–µ—Ä—ë–º MAX_APPS –≤–∞–ª–∏–¥–Ω—ã—Ö email –∏–º–µ–Ω–Ω–æ –¥–ª—è –∏–≥—Ä
alphabet = [chr(i) for i in range(ord("a"), ord("z") + 1)] + [str(d) for d in range(0, 10)]
collected_ids = []
added_count = 0

for keyword in alphabet:
    if added_count >= MAX_APPS:
        break
    try:
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∫–æ–ª–æ 10‚Äì20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
        results = search(keyword, lang="en", country="us")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á—É '{keyword}': {e}")
        continue

    for item in results:
        if added_count >= MAX_APPS:
            break
        app_id = item.get("appId")
        if not app_id or app_id in collected_ids:
            continue
        collected_ids.append(app_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        try:
            data = app(app_id, lang="ru", country="ru")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö Google Play –¥–ª—è '{app_id}': {e}")
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ò–≥—Ä—ã"
        genre_id = data.get("genreId", "")
        if not genre_id.startswith("GAME"):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—é–±—ã–µ –Ω–µ-–∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            continue

        title = data.get("title", "")
        installs = data.get("installs", "N/A")
        developer = data.get("developer", "")
        email = data.get("developerEmail", "")
        address_full = data.get("developerAddress", "")
        country = address_full.split(",")[-1].strip() if address_full else ""
        rating = data.get("score", "")
        released = data.get("released", "")
        subcategory = data.get("genre", "")
        has_video = bool(data.get("video"))

        # –ü—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ –Ω–µ—Ç email –∏–ª–∏ email —É–∂–µ –µ—Å—Ç—å
        if not email:
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ (–Ω–µ—Ç email): {app_id}")
            continue
        if email in existing_emails:
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫ (–¥—É–±–ª–∏–∫–∞—Ç email): {email}")
            continue

        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if not validate_email(email):
            print(f"‚õî Email –Ω–µ –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {email}")
            continue

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [
            app_id,
            title,
            installs,
            email,
            developer,
            country,
            rating,
            released,
            subcategory,
            "–î–∞" if has_video else "–ù–µ—Ç"
        ]

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets
        try:
            sheet.append_row(row_data)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets: {app_id}")
        except Exception as e:
            print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets: {e} ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV.")
            save_to_csv(row_data)

        existing_emails.add(email)
        added_count += 1
        time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API

print(f"üéØ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –∑–∞–ø–∏—Å–µ–π.")

# === –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢ –í CSV ===

# –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (weekday()==0), —Å–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç Google Sheets –≤ CSV
if datetime.today().weekday() == 0:
    try:
        all_values = sheet.get_all_values()
        week_fname = f"weekly_backup_{datetime.now().strftime('%Y-%m-%d')}.csv"
        with open(week_fname, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerows(all_values)
        print(f"üóÇ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π CSV-—ç–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {week_fname}")
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
